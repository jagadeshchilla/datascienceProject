name: CI/CD Pipeline for Data Science Project

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: datascienceproject
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test import structure
      run: |
        python -c "from src.datascience_project.pipeline.prediction_pipeline import PredictionPipeline; print('Import successful')"
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          
  deploy-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Test Deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Test Docker image
      run: |
        # Pull the latest image
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Run container with DagsHub credentials
        docker run -d \
          --name test-container \
          -p 8080:8080 \
          -e MLFLOW_TRACKING_URI="https://dagshub.com/jagadeshchilla/datascienceProject.mlflow" \
          -e MLFLOW_TRACKING_USERNAME="jagadeshchilla" \
          -e MLFLOW_TRACKING_PASSWORD="${{ secrets.DAGSHUB_TOKEN }}" \
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
        # Wait for container to start properly
        sleep 20
        
        # Check if container is running
        docker ps | grep test-container
        
        # Check container logs for debugging
        echo "Container logs:"
        docker logs test-container
        
        # Test health check with retries
        echo "Testing health check..."
        for i in {1..5}; do
          if curl -f http://localhost:8080/health; then
            echo "Health check passed on attempt $i"
            break
          else
            echo "Health check failed on attempt $i, retrying in 10s..."
            sleep 10
          fi
          if [ $i -eq 5 ]; then
            echo "Health check failed after 5 attempts"
            docker logs test-container
            exit 1
          fi
        done
        
        # Test homepage endpoint
        echo "Testing homepage endpoint..."
        curl -f http://localhost:8080/ || {
          echo "Homepage endpoint test failed"
          docker logs test-container
          exit 1
        }
        
        # Test train endpoint (lightweight test)
        echo "Testing train endpoint availability..."
        curl -f http://localhost:8080/train --max-time 5 || {
          echo "Train endpoint not accessible (this is expected for quick test)"
          echo "Container is healthy and endpoints are accessible"
        }
        
        # Clean up
        docker stop test-container
        docker rm test-container
        
  notify:
    needs: [test, build-and-push, deploy-test]
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.deploy-test.result == 'success'
      run: |
        echo "üéâ Deployment successful! Docker image pushed to Docker Hub."
        echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        
    - name: Deployment Failed
      if: needs.deploy-test.result == 'failure'
      run: |
        echo "‚ùå Deployment failed. Check the logs for details."
        exit 1 